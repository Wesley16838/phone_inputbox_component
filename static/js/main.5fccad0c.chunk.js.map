{"version":3,"sources":["components/scrollList/scrollList.tsx","components/modal/modal.tsx","components/inputbox/inputbox.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["ScrollList","props","inlineStyles","display","show","style","className","data","Array","length","map","item","onClick","e","dial_code","name","flag","afterClick","handleOnClick","Modal","React","useState","filter","setFilter","currentValue","setCurrentValue","modalRef","useRef","onShow","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","selectedValue","country","nationCode","placeholder","onFocus","onChange","filteredData","value","toLowerCase","indexOf","currentTarget","InputBox","phoneNumber","phonenumber","setPhoneNumber","showlist","setShowList","inputRef","info","focus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"09qBAwCeA,EArCI,SAACC,GAMlB,IAKMC,EAAe,CACnBC,QAFaF,EAAMG,KAAO,QAAU,QAItC,OACE,qBAAKC,MAAOH,EAAcI,UAAU,aAApC,SACE,6BACGL,EAAMM,gBAAgBC,OAA+B,IAAtBP,EAAMM,KAAKE,OACzCR,EAAMM,KAAKG,KAAI,SAACC,GACd,OACE,qBAAoBC,QAAS,SAACC,GAAD,OAdnB,SAACF,GACjBV,EAAMW,SAASX,EAAMW,QAAQD,EAAKG,UAAWH,EAAKI,KAAMJ,EAAKK,MAC7Df,EAAMgB,YAAYhB,EAAMgB,YAAW,GAYOC,CAAcP,IAAlD,UACE,4BAAIA,EAAKK,OACT,4BAAIL,EAAKI,OACT,kCAAKJ,EAAKG,UAAV,SAHOH,EAAKI,SAQlB,oBAAIT,UAAU,UAAd,SACE,2CAD0B,iBC0CvBa,G,MApED,SAAClB,GAMR,IAAD,EACwBmB,IAAMC,SAAcpB,EAAMM,MADlD,mBACGe,EADH,KACWC,EADX,OAEoCH,IAAMC,SAAiB,IAF3D,mBAEGG,EAFH,KAEiBC,EAFjB,KAGEC,EAAWN,IAAMO,SACfC,EAAW3B,EAAX2B,OAkBR,OAZAR,IAAMS,WAAU,WACd,SAASC,EAAmBC,GAAa,IAAD,EAClCL,EAASM,WAAW,OAACN,QAAD,IAACA,GAAD,UAACA,EAAUM,eAAX,aAAC,EAAmBC,SAASF,EAAMG,UACzDN,GAAO,GAIX,OADAO,SAASC,iBAAiB,YAAaN,GAChC,WACLK,SAASE,oBAAoB,YAAaP,MAE3C,CAACJ,EAAUE,IAGZ,sBAAKtB,UAAU,QAAQgC,IAAKZ,EAA5B,UACE,sBAAKpB,UAAU,gBAAf,UACE,4BAAIL,EAAMsC,cAAcvB,OACxB,4BAAIf,EAAMsC,cAAcC,UACxB,kCAAKvC,EAAMsC,cAAcE,WAAzB,UAEF,qBAAKnC,UAAU,aAAf,SACE,uBACEA,UAAU,aACVoC,YAAY,SACZC,QAAS,WACP1C,EAAM2B,QAAO,IAEfgB,SAAU,SAAC/B,GACT,IAAMgC,EAAe5C,EAAMM,KAAKe,QAC9B,SAACX,GAAD,MACqB,KAAnBE,EAAEqB,OAAOY,OAGoC,IAF7CnC,EAAKI,KACFgC,cACAC,QAAQnC,EAAEqB,OAAOY,MAAMC,kBAE9BtB,EAAgBZ,EAAEoC,cAAcH,OAChCvB,EAAUsB,IAEZC,MAAOtB,MAGX,qBAAKlB,UAAU,cAAf,SACE,cAAC,EAAD,CACEC,KAAMe,EACNV,QAASX,EAAMW,QACfR,KAAMH,EAAMG,KACZa,WAlDW,WACjBQ,EAAgB,IAChBF,EAAUtB,EAAMM,MACZqB,GAAQA,GAAO,aC6BRsB,EA1CE,WAAO,IAAD,EACiB9B,IAAMC,SAAuB,CACjE8B,YAAa,GACbV,WAAY,KACZD,QAAS,gBACTxB,KAAM,6BALa,mBACdoC,EADc,KACDC,EADC,OAOWjC,IAAMC,UAAS,GAP1B,mBAOdiC,EAPc,KAOJC,EAPI,KAQfC,EAAWpC,IAAMO,SASvB,OACE,qCACE,sBAAKrB,UAAU,WAAf,UACE,qBAAKA,UAAU,aAAf,SAA6B8C,EAAYX,aACzC,uBACEnC,UAAU,cACVwC,MAAOM,EAAYD,YACnBP,SAAU,SAAC/B,GAAD,OACRwC,EAAe,2BAAKD,GAAN,IAAmBD,YAAatC,EAAEqB,OAAOY,UAEzDH,QAAS,kBAAMY,GAAY,IAC3BjB,IAAKkB,OAGT,cAAC,EAAD,CACEjB,cAAea,EACf7C,KAAMkD,EACN7C,QAzBqB,SACzB6B,EACAD,EACAxB,GAEAqC,EAAe,2BAAKD,GAAN,IAAmBX,aAAYD,UAASxB,UACtDwC,EAASxB,QAAQ0B,SAoBb9B,OAAQ2B,EACRnD,KAAMkD,QC5BCK,MAVf,WACE,OACE,qBAAKrD,UAAU,MAAf,SACE,8BACE,cAAC,EAAD,SCIOsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BZ,M","file":"static/js/main.5fccad0c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.scss\";\n\nconst ScrollList = (props: {\n  data: object;\n  onClick: any;\n  show: boolean;\n  afterClick: any;\n}) => {\n  const handleOnClick = (item: any) => {\n    if (props.onClick) props.onClick(item.dial_code, item.name, item.flag);\n    if (props.afterClick) props.afterClick(false);\n  };\n  const showed = props.show ? \"block\" : \"none\";\n  const inlineStyles = {\n    display: showed,\n  };\n  return (\n    <div style={inlineStyles} className=\"scrolllist\">\n      <ul>\n        {props.data instanceof Array && props.data.length !== 0 ? (\n          props.data.map((item) => {\n            return (\n              <li key={item.name} onClick={(e) => handleOnClick(item)}>\n                <p>{item.flag}</p>\n                <p>{item.name}</p>\n                <p>({item.dial_code})</p>\n              </li>\n            );\n          })\n        ) : (\n          <li className=\"disable\" key=\"noResult\">\n            <p>No result</p>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default ScrollList;\n","import React from \"react\";\nimport ScrollList from \"./../scrollList/scrollList\";\nimport IPhoneNumber from \"./../../interfaces\";\nimport \"./style.scss\";\n\nconst Modal = (props: {\n  selectedValue: IPhoneNumber;\n  data: any;\n  onClick: any;\n  onShow: any;\n  show: boolean;\n}) => {\n  const [filter, setFilter] = React.useState<any>(props.data);\n  const [currentValue, setCurrentValue] = React.useState<string>(\"\");\n  const modalRef = React.useRef<any>();\n  const { onShow } = props;\n  const afterClick = () => {\n    setCurrentValue(\"\");\n    setFilter(props.data);\n    if (onShow) onShow(false);\n  };\n  React.useEffect(() => {\n    function handleClickOutside(event: any) {\n      if (modalRef.current && !modalRef?.current?.contains(event.target)) {\n        onShow(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [modalRef, onShow]);\n\n  return (\n    <div className=\"modal\" ref={modalRef}>\n      <div className=\"modalselected\">\n        <p>{props.selectedValue.flag}</p>\n        <p>{props.selectedValue.country}</p>\n        <p>({props.selectedValue.nationCode})</p>\n      </div>\n      <div className=\"modalinput\">\n        <input\n          className=\"inputModal\"\n          placeholder=\"Search\"\n          onFocus={() => {\n            props.onShow(true);\n          }}\n          onChange={(e) => {\n            const filteredData = props.data.filter(\n              (item: any) =>\n                e.target.value === \"\" ||\n                item.name\n                  .toLowerCase()\n                  .indexOf(e.target.value.toLowerCase()) === 0\n            );\n            setCurrentValue(e.currentTarget.value);\n            setFilter(filteredData);\n          }}\n          value={currentValue}\n        />\n      </div>\n      <div className=\"modalscroll\">\n        <ScrollList\n          data={filter}\n          onClick={props.onClick}\n          show={props.show}\n          afterClick={afterClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport \"./style.scss\";\nimport info from \"./../../assets/country_dial_info.json\";\nimport Modal from \"./../../components/modal/modal\";\nimport IPhoneNumber from \"./../../interfaces\";\n\nconst InputBox = () => {\n  const [phonenumber, setPhoneNumber] = React.useState<IPhoneNumber>({\n    phoneNumber: \"\",\n    nationCode: \"+1\",\n    country: \"United States\",\n    flag: \"ðŸ‡ºðŸ‡¸\",\n  });\n  const [showlist, setShowList] = React.useState(false);\n  const inputRef = React.useRef<any>();\n  const onChangeNationCode = (\n    nationCode: string,\n    country: string,\n    flag: string\n  ) => {\n    setPhoneNumber({ ...phonenumber, nationCode, country, flag });\n    inputRef.current.focus();\n  };\n  return (\n    <>\n      <div className=\"inputbox\">\n        <div className=\"nationcode\">{phonenumber.nationCode}</div>\n        <input\n          className=\"phonenumber\"\n          value={phonenumber.phoneNumber}\n          onChange={(e) =>\n            setPhoneNumber({ ...phonenumber, phoneNumber: e.target.value })\n          }\n          onFocus={() => setShowList(false)}\n          ref={inputRef}\n        />\n      </div>\n      <Modal\n        selectedValue={phonenumber}\n        data={info}\n        onClick={onChangeNationCode}\n        onShow={setShowList}\n        show={showlist}\n      />\n    </>\n  );\n};\n\nexport default InputBox;\n","import \"./App.scss\";\nimport React from \"react\";\nimport InputBox from \"./components/inputbox/inputbox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <InputBox />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}